#ifndef lexer_h
#define lexer_h

typedef enum {
  TOKEN_AND,
  TOKEN_BANG,
  TOKEN_BANG_EQUAL,
  TOKEN_CASE,
  TOKEN_COLON,
  TOKEN_CONST,
  TOKEN_DEFAULT,
  TOKEN_DOT,
  TOKEN_EOF,
  TOKEN_ELSE,
  TOKEN_EQUAL,
  TOKEN_EQUAL_EQUAL,
  TOKEN_ERROR,
  TOKEN_FALSE,
  TOKEN_FLOAT,
  TOKEN_FOR,
  TOKEN_GREATER,
  TOKEN_GREATER_EQUAL,
  TOKEN_IDENTIFIER,
  TOKEN_IF,
  TOKEN_INT,
  TOKEN_LEFT_BRACE,
  TOKEN_LEFT_BRACKET,
  TOKEN_LEFT_PAREN,
  TOKEN_LESS,
  TOKEN_LESS_EQUAL,
  TOKEN_MINUS,
  TOKEN_MINUS_EQUAL,
  TOKEN_MINUS_MINUS,
  TOKEN_OR,
  TOKEN_PERCENT,
  TOKEN_PLUS,
  TOKEN_PLUS_EQUAL,
  TOKEN_PLUS_PLUS,
  TOKEN_QUESTION,
  TOKEN_RIGHT_BRACE,
  TOKEN_RIGHT_BRACKET,
  TOKEN_RIGHT_PAREN,
  TOKEN_RETURN,
  TOKEN_SLASH,
  TOKEN_SLASH_EQUAL,
  TOKEN_STAR,
  TOKEN_STAR_EQUAL,
  TOKEN_STRING,
  TOKEN_SWITCH,
  TOKEN_TRUE,
  TOKEN_TYPE,
  TOKEN_VAR,
  TOKEN_WHILE,
} token_type;

typedef struct {
  token_type type;
  int line;
  unsigned long size;
  char *lexeme;
} token;

void init_lexer(char *source, token *tkn);
token *get_token();
void token_to_string(token *tkn);

#endif
